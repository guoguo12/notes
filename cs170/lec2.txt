 ___________
< Lecture 2 >
 -----------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

Runtime
  Function of input size
  Use asymptotic analysis (big-O)
  For recursive processes, use recurrence relations

Better Fibonacci numbers alg.
  [Fig. 1]
  Exp. matrices quickly w/ exp. by squaring
    O(log n) time
      assuming mult. ints is O(1)
    Can use similar trick to find a^b mod c

Adding n-bit numbers
  Naively O(n)
Mult. n-bit numbers
  Naively O(n^2)
Why do we care about adding/mult. long numbers?
  It's interesting!
  Crypto, e.g. RSA encryption
  
Naive primality test
  Check all numbers from 1 to n-1
  O(n^2) where n is input size
    b/c mult. is O(n)

Better primality test
  


      

  
