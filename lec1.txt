< Lecture 1 >
 -----------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

Algorithms have always been important

Homeworks are due on Fridays at 5 PM
Collaboration is encouraged
  but don't share written homework
Homework parties are Wednesdays 6-9

Fibonacci numbers
  Fib(n) = Fib(n-1) + Fib(n-2) for n > 1 else Fib(n) = n
  Fib(n) is about n bits long
    b/c adding k-dig number to k-dig number is probably (k+1)-dig number
  Can't use 32-bit addition to find Fib(10^6) 

Important things about algorithms
  Correctness
  Runtime
    Let T(n) = # of operations to find Fib(n)
    Recurrence relation: T(n) = T(n-1) + T(n-2) + C
      so T(n) is O(2^n)
      Doesn't account for cost of addition

Finding exact number of operations is hard
  Requires details about machine
More important to know how it scales (asymptotic analysis)

Use big-O notation to simplify runtime approximations

Better way to compute Fibonacci numbers?
  Loop from 2 to n
  Use array to memoize results
  Takes O(n^2) operations
    b/c addition is linear in size of args

